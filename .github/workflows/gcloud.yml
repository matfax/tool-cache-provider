name: gcloud

on:
  workflow_call:
    inputs:
      subcommand:
        required: true
        type: string
      command:
        required: false
        type: string
        default: beta compute
      expect_failure:
        required: false
        type: boolean
        default: false
      add_service_account:
        required: false
        type: boolean
        default: false
    outputs:
      result:
        description: the supported versions within specified days
        value: ${{ jobs.execute.outputs.result }}

jobs:
  execute:
    name: execute ${{ inputs.command == 'beta compute' && 'compute' || inputs.command }} job
    environment: google cloud
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write
    outputs:
      result: ${{ steps.command.outputs.result }}
      credentials_file: ${{ (inputs.credentials_file == '' || steps.restore.outputs.cache-hit != 'true') && steps.credentials_filename.outputs.filename || inputs.credentials_file }}
    runs-on: ubuntu-latest
    steps:
      - name: check out repository
        uses: actions/checkout@v3.5.3
      - id: auth
        name: authenticate to Google Cloud
        uses: google-github-actions/auth@v1.1.1
        with:
          workload_identity_provider: ${{ secrets.ID_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      - name: set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          skip_install: true
          version: ''
          project_id: github-matfax
      - name: set up Node.js
        uses: actions/setup-node@v3.7.0
        with:
          node-version: lts/Hydrogen
          cache: npm
      - name: install node dependencies
        run: npm ci
      - name: execute gcloud ${{ inputs.command }} job
        uses: actions/github-script@v6.4.1
        id: command
        with:
          script: |
            const { parseArgsStringToArgv } = require('string-argv')
            const commandArgs = parseArgsStringToArgv('${{ inputs.command }}')
            const subCommandArgs = parseArgsStringToArgv('${{ inputs.subcommand }}')
            const serviceAccountOpt = '${{ inputs.add_service_account }}' === 'true' ? parseArgsStringToArgv('--service-account=${{ secrets.SERVICE_ACCOUNT }}') : []
            const options = {
                ignoreReturnCode: true
            }
            const output = await exec.getExecOutput('gcloud', [...commandArgs, ...subCommandArgs, ...serviceAccountOpt, '--quiet', '--format="json"'], options)
            if (output.exitCode != 0 && '${{ inputs.expect_failure }}' !== 'true') {
              core.setFailed(output.stderr)
            } else if (output.exitCode == 0 && '${{ inputs.expect_failure }}' === 'true') {
              core.setFailed('expected failure but got success')
            }
            core.setOutput('exitCode', output.exitCode)
            core.setOutput('result', output.stdout)
